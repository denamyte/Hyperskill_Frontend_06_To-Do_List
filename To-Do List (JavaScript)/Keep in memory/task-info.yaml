type: edu
files:
  - name: src/index.html
    visible: true
    text: |
      <!doctype html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <title>Document</title>
      </head>
      <body>
      
      </body>
      </html>
    learner_created: false
  - name: test/test.js
    visible: false
    text: |+
      const path = require('path');
      const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
      const {StageTest, correct, wrong} = require('hs-test-web');
      
      class TodoTest extends StageTest {
      
          page = this.getPage(pagePath)
      
          tests = [
              this.page.execute(() => {
                  if (document.title !== 'To-Do List') {
                      return wrong("The title of the page should be 'To-Do List'")
                  }
      
                  return correct();
              }),
              this.page.execute(() => {
      
                  let taskList = document.getElementById("task-list")
      
                  if (taskList === null || taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  let tasks = taskList.getElementsByTagName("li")
      
                  const numberOfTasks = tasks.length;
                  let counter = 0;
      
                  while (true) {
      
                      if (counter > numberOfTasks) {
                          return wrong("Looks like after deleting a task it is not removed from the task list!")
                      }
      
                      const deleteButton = document.querySelector("button.delete-btn")
                      if (deleteButton === null) {
                          break
                      }
                      deleteButton.click()
      
                      counter++
                  }
      
                  taskList = document.getElementById("task-list")
                  if (taskList === null || taskList.tagName !== 'UL')
                      return wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")
      
                  tasks = taskList.getElementsByTagName("li")
      
                  if (tasks.length !== 0) {
                      return wrong("After deleting all the tasks there shouldn't be any <li> tag")
                  }
      
                  return correct()
              }),
              this.page.execute(() => {
                  const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']
      
                  const inputField = document.getElementById("input-task")
                  if (inputField === null || inputField.tagName !== 'INPUT')
                      return wrong("Can't find input field with id '#input-task'")
      
                  const addButton = document.getElementById("add-task-button")
                  if (addButton === null || addButton.tagName !== 'BUTTON')
                      return wrong("Can't find button with id '#add-task-button'")
      
                  const taskList = document.getElementById("task-list")
                  if (taskList === null || taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  let currentTaskCounter = 1;
      
                  for (let taskName of tasksName) {
                      inputField.value = taskName
                      addButton.click()
      
                      const tasks = taskList.getElementsByTagName("li")
      
                      if (tasks.length !== currentTaskCounter) {
                          return wrong("After adding a task number of the <li> tags is not increased!")
                      }
      
                      currentTaskCounter++
                  }
      
                  return correct()
              }),
              this.page.execute(() => {
      
                  const taskList = document.getElementById("task-list")
                  if (taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  const tasks = taskList.getElementsByTagName("li")
                  if (tasks.length !== 5)
                      return wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")
      
                  for (let task of tasks) {
                      const checkbox = task.querySelector("input[type=checkbox]")
                      if (checkbox === null)
                          return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")
      
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      const deleteButton = task.querySelector("button.delete-btn")
                      if (deleteButton === null)
                          return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                  }
      
      
                  return correct();
              }),
              this.page.execute(() => {
                  const taskList = document.getElementById("task-list")
                  if (taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  let tasks = taskList.getElementsByTagName("li")
      
                  for (let task of tasks) {
                      const taskName = task.querySelector("span.task")
      
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      if (taskName.textContent === 'Third task') {
                          const checkbox = task.querySelector("input[type=checkbox]")
                          checkbox.click()
                          break;
                      }
                  }
      
                  tasks = taskList.getElementsByTagName("li")
      
                  for (let task of tasks) {
      
                      const taskName = task.querySelector("span.task")
      
                      if (taskName === null) {
                          return wrong("After marking a task as completed can not find a <span> tag with 'task' class inside <li> tag")
                      }
      
                      if (taskName.textContent === 'Third task') {
                          let taskName = task.querySelector("span.task")
                          if (taskName === null)
                              return wrong("Inside each <li> tag should be one <span> tag with 'task' class")
      
                          if (!taskName.style.textDecoration.includes("line-through") &&
                              !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                              return wrong("If checkbox is checked the task name should be crossed out.\n" +
                                  "The span tag with task name should have 'text-decoration: line-trough' style")
                          }
      
                          return correct()
                      }
                  }
      
                  return wrong("Can't find task with name 'Third task' after it was added!")
              }),
              this.node.execute(async () => {
                  await this.page.refresh()
                  return correct()
              }),
              this.page.execute(async () => {
      
                  const taskList = document.getElementById("task-list")
                  if (taskList.tagName !== 'UL')
                      return wrong("Can't find <ul> tag with id '#task-list'")
      
                  const tasks = taskList.getElementsByTagName("li")
      
                  if (tasks.length !== 5) {
                      return wrong("Looks like you didn't store the tasks in the local storage.\n" +
                          "After refreshing the page expected 5 tasks!")
                  }
      
                  for (let task of tasks) {
                      const checkbox = task.querySelector("input[type=checkbox]")
                      if (checkbox === null)
                          return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")
      
                      const taskName = task.querySelector("span.task")
                      if (taskName === null)
                          return wrong("Inside each <li> tag should one <span> tag with 'task' class")
      
                      const deleteButton = task.querySelector("button.delete-btn")
                      if (deleteButton === null)
                          return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                  }
      
                  return correct()
              })
          ]
      }
      
      it('Test stage', async function () {
          try {
              this.timeout(30000)
          } catch (ignored) {
          }
          await new TodoTest().runTests()
      }, 30000)
    
    learner_created: false
  - name: src/css/style.css
    visible: true
    text: |
      body {
          font-family: sans-serif;
      }
      
      h1 {
          text-align: center;
          font-weight: normal;
          font-size: 3em;
      }
      
      main {
          width: 70%;
          margin: 0 auto;
      }
      
      #add-area {
          display: flex;
          justify-content: space-between;
      }
      
      #input-task {
          display: inline-block;
          width: 75%;
          font-size: 1em;
          padding: 0 10px;
          border: none;
          border-bottom: 2px solid #664d73;
      }
      
      #add-task-button {
          width: 20%;
          font-weight: bold;
          border: none;
          font-size: 1.2em;
          padding: 15px 0;
          background-color: #c8b8db;
          color: white;
      }
      
      #task-list {
          padding: 0;
          list-style: none;
      }
      
      .check {
          display: inline-block;
          width: 1.5em;
          height: 1.5em;
          margin: 2px 20px 3px 5px;
      }
      
      #task-list li {
          padding: 5px;
          margin: 10px;
      }
      
      .delete-btn {
          font-size: 1.2em;
          padding: 0 8px 3px;
          margin: 0 10px;
          border-radius: 50%;
          border: 0;
          background-color: #f44336;
          color: white;
          float: right;
      }
      
      .done {
          text-decoration: line-through;
      }
    learner_created: true
  - name: src/js/script.js
    visible: true
    text: |
      function init() {
          ['Task 1', 'Task 2', 'Task 3'].forEach(addTask)
      
          document.getElementById("add-task-button")
              .addEventListener("click", addButtonClick);
      }
      
      function addButtonClick(ev) {
          let inp = document.getElementById("input-task");
          addTask(inp.value);
          inp.value = "";
          inp.focus();
      }
      
      function addTask(text) {
          const li = document.createElement('li');
      
          const chb = document.createElement('input');
          chb.className = 'check';
          chb.type = 'checkbox';
      
          const span = document.createElement('span');
          span.className = 'task';
          span.innerText = text;
      
          assignMarkDoneEvent(chb, span);
      
          const btn = document.createElement('button');
          btn.className = 'delete-btn';
          btn.innerText = 'x';
          btn.addEventListener('click', ev => {
              ev.target.parentNode.remove();
          });
      
          li.append(chb, span, btn);
          document.getElementById('task-list').append(li);
      }
      
      /**
       * Assign the change event listener to the checkbox to mark the task as done/undone.
       * @param {HTMLInputElement} chb
       * @param {HTMLSpanElement} sp
       */
      function assignMarkDoneEvent(chb, sp) {
          chb.addEventListener('change', ev => {
              if (chb.checked) sp.classList.add('done');
              else sp.classList.remove('done');
          });
      }
      
      init();
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/13197#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 12 Dec 2023 21:32:05 UTC"
record: -1
